import numpy as np
import cv2
import matplotlib.pyplot as plt
from concurrent.futures import ThreadPoolExecutor

image = np.zeros((200, 200), dtype=np.uint8)
cv2.rectangle(image, (50, 50), (150, 150), 127, -1)
cv2.circle(image, (100, 100), 40, 200, -1)

noise = np.random.normal(0, 15, image.shape).astype(np.int16)
noisy_image = np.clip(image.astype(np.int16) + noise, 0, 255).astype(np.uint8)

def local_denoise(cell, kernel_size=3, iterations=5):
    patch = cell.copy()
    for _ in range(iterations):
        local_mean = cv2.blur(patch, (kernel_size, kernel_size))
        patch = cv2.addWeighted(patch, 0.6, local_mean, 0.4, 0)
    return patch

def parallel_cellular_denoise(noisy_image, cell_size=20, workers=8):
    h, w = noisy_image.shape
    denoised = np.zeros_like(noisy_image)
    cells = []
    coords = []
    for y in range(0, h, cell_size):
        for x in range(0, w, cell_size):
            cell = noisy_image[y:y+cell_size, x:x+cell_size]
            cells.append(cell)
            coords.append((y, x))
    with ThreadPoolExecutor(max_workers=workers) as executor:
        results = list(executor.map(local_denoise, cells))
    for (y, x), patch in zip(coords, results):
        denoised[y:y+patch.shape[0], x:x+patch.shape[1]] = patch
    denoised = cv2.GaussianBlur(denoised, (3, 3), 0)
    return denoised

denoised_image = parallel_cellular_denoise(noisy_image, cell_size=20, workers=8)

plt.figure(figsize=(12, 4))
plt.subplot(1, 3, 1)
plt.imshow(image, cmap='gray')
plt.title("Original")

plt.subplot(1, 3, 2)
plt.imshow(noisy_image, cmap='gray')
plt.title("Noisy")

plt.subplot(1, 3, 3)
plt.imshow(denoised_image, cmap='gray')
plt.title("Denoised (Parallel Cellular)")

plt.tight_layout()
plt.show()
